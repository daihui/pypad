#!/usr/bin/env python

# THIS FILE IS PART OF PyPad, AND IS GOVERENED BY A PERMISSIBILITY LICENSE 
# GOVERNING ITS USE AND DISTRIBUTION. YOU SHOULD HAVE RECIEVED A COPY OF THIS
# LICENSE WITH THE SOFTWARE; IF NOT PROVIDED, WRITE TO <tjlane@stanford.edu>.
#
# AUTHORS:
# TJ Lane <tjlane@stanford.edu>
# Jonas Sellberg <jonas.a.sellberg@gmail.com>
#
# Apr 30, 2013

"""
Convert either a CSPad object to another file format: Odin, Cheetah, psana, etc.
"""

import os
import argparse

from pypad import cspad

parser = argparse.ArgumentParser(description='''Convert a CSPad geometry file to
 another file format.''')
                                 
parser.add_argument('geometry', default=None, 
                    help='''A CSPAD Metrology, in {.cspad, .h5, .geom, .dtc} format''')
parser.add_argument('-o', '--output', required=True,
                    help='''The name of the file to write, containing the final mask.''')
parser.add_argument('-f', '--format', required=True, 
                    choices=['odin', 'cheetah', 'crystfel', 'text'],
                    help='''The file format to write.''')
parser.add_argument('-t', '--type', help='''The metrology type.''', 
                    default='cxi', choices=['cxi', 'xpp'])
args = parser.parse_args()


geom = cspad.CSPad.load(args.geometry, mettype=args.type)

if args.format == 'odin':
    energy = float( raw_input('Energy to set the Odin detector to [eV]: ') )
    dist   = float( raw_input('Distance offset (along the z-direction) [mm]: '))
    geom.to_odin(energy, dist, args.output)
elif args.format == 'cheetah':
    geom.to_cheetah(args.output)
elif args.format == 'crystfel':
    geom.to_crystfel(args.output)
elif args.format == 'text':
    geom.to_text(args.output)
else:
    raise IOError('Cannot understand format: %s' % args.format)


