#!/usr/bin/env python

# THIS FILE IS PART OF PyPad, AND IS GOVERENED BY A PERMISSIBILITY LICENSE 
# GOVERNING ITS USE AND DISTRIBUTION. YOU SHOULD HAVE RECIEVED A COPY OF THIS
# LICENSE WITH THE SOFTWARE; IF NOT PROVIDED, WRITE TO <tjlane@stanford.edu>.
#
# AUTHORS:
# TJ Lane <tjlane@stanford.edu>
# Jonas Sellberg <jonas.a.sellberg@stanford.edu>
#
# Apr 30, 2013

"""
Take a raw image and a set of psana parameters and produce an assembled image.
"""

import yaml
import argparse

from pypad import cspad
from pypad import utils
from pypad import read
from pypad.autogeom import score
from pypad.autogeom import optimize as opt

import numpy as np
import matplotlib.pyplot as plt

    
def parse():
    
    parser = argparse.ArgumentParser(description='''Optimize the CSPAD geometry 
                                     using a calibration standard''')
    parser.add_argument('image_file', help='The (raw) image file of the calibration standard')
    parser.add_argument('filter_params', default='filter_params.yaml',
                        help='''The filter parameters to employ (default: filter_params.yaml),
                                can be easily generated from the `genfilter` script''')
    parser.add_argument('-m', '--metrology', default=None, 
                        help='''A CSPAD Metrology. Either a flat text file of an 
                                optical metrology (see documentation) or a saved 
                                pypad.CSPad object. If not passed uses a default
                                metrology.''')
    parser.add_argument('-o', '--output', default='my_cspad.cspad', type=str,
                        help='The file optimized CSPAD to (default: my_cspad.cspad)')
    parser.add_argument('-t', '--type', help='''The metrology type.''',
                        default='cxi', choices=['cxi', 'xpp'])
                        
    args = parser.parse_args()
    
    return args

    
def main():
    
    print "\n"
    print " --- ASSEMBLING GEOMETRY FROM CALIBRATION STANDARD --- "
    print ""
    
    args = parse()
    
    # load the calibration image
    cal_image = read.load_raw_image(args.image_file)
    
    # load the filter_params
    print "Loading: %s" % args.filter_params
    f = open(args.filter_params, 'r')
    optimization_params = yaml.load(f)
    f.close()
    
    # load the initial CSPad object to start from
    if args.metrology:
        if args.type == 'cxi':
            cs1 = cspad.CSPad.load(args.metrology)
        elif args.type == 'xpp':
            cs1 = cspad.XppCSPad.load(args.metrology)
    else:
        cs1 = cspad.CSPad.default()
    
    # generate the image optimizer and run it
    optizor = opt.Optimizer(cs1, **optimization_params)
    opt_cspad = optizor(cal_image)
    
    # save the final parameters to disk
    opt_cspad.save(args.output)
    
    return

    
if __name__ == '__main__':
    main()
